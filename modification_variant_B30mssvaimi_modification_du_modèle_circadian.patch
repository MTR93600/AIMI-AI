Index: plugins/aps/src/main/assets/AIMI/b30mssvaimi/determine-basal.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/aps/src/main/assets/AIMI/b30mssvaimi/determine-basal.js b/plugins/aps/src/main/assets/AIMI/b30mssvaimi/determine-basal.js
--- a/plugins/aps/src/main/assets/AIMI/b30mssvaimi/determine-basal.js	(revision 75a5f2b702d20137e661d7dcbf38dbc6bcd4eea3)
+++ b/plugins/aps/src/main/assets/AIMI/b30mssvaimi/determine-basal.js	(revision e59a9511c91e1104725f2d3bfd754a6a8b66cbbe)
@@ -1016,7 +1016,7 @@
                 UAMduration = round((UAMpredBGs.length+1)*5/60,1);
             }
             //UAMpredBG = iTime < iTimeProfile ? IOBpredBGs[IOBpredBGs.length-1] + predBGI + Math.min(0, predDev) + predUCI : UAMpredBGs[UAMpredBGs.length-1] + predBGI + Math.min(0, predDev) + predUCI;
-            UAMpredBG = iob_data.iob > ((AIMI_lastBolusSMBUnits * 1.618) + 1) || BFIOB || AIMI_UAM === false || iTimeActivation && aimi_bg <= 150 ? IOBpredBGs[IOBpredBGs.length-1] + (round((-iobTick.activity * (1800 / ( TDD * (Math.log((Math.max( IOBpredBGs[IOBpredBGs.length-1],39) / insulinDivisor ) + 1 ) ) )) * 5 ),2)) : UAMpredBGs[UAMpredBGs.length-1] + (round(( -iobTick.activity * (1800 / ( TDD * (Math.log(( Math.max(UAMpredBGs[UAMpredBGs.length-1],39) / insulinDivisor ) + 1 ) ) )) * 5 ),2)) + Math.min(0, predDev) + predUCI;
+            UAMpredBG = iob_data.iob > ((AIMI_lastBolusSMBUnits * 1.618) + 1) || BFIOB || AIMI_UAM === false || iTimeActivation && countSMB >=2 ? IOBpredBGs[IOBpredBGs.length-1] + (round((-iobTick.activity * (1800 / ( TDD * (Math.log((Math.max( IOBpredBGs[IOBpredBGs.length-1],39) / insulinDivisor ) + 1 ) ) )) * 5 ),2)) : UAMpredBGs[UAMpredBGs.length-1] + (round(( -iobTick.activity * (1800 / ( TDD * (Math.log(( Math.max(UAMpredBGs[UAMpredBGs.length-1],39) / insulinDivisor ) + 1 ) ) )) * 5 ),2)) + Math.min(0, predDev) + predUCI;
             //console.error(predBGI, predCI, predUCI);
             // truncate all BG predictions at 4 hours
 
Index: plugins/insulin/src/main/java/info/nightscout/insulin/InsulinOrefBasePlugin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/insulin/src/main/java/info/nightscout/insulin/InsulinOrefBasePlugin.kt b/plugins/insulin/src/main/java/info/nightscout/insulin/InsulinOrefBasePlugin.kt
--- a/plugins/insulin/src/main/java/info/nightscout/insulin/InsulinOrefBasePlugin.kt	(revision 75a5f2b702d20137e661d7dcbf38dbc6bcd4eea3)
+++ b/plugins/insulin/src/main/java/info/nightscout/insulin/InsulinOrefBasePlugin.kt	(revision e59a9511c91e1104725f2d3bfd754a6a8b66cbbe)
@@ -80,7 +80,38 @@
         val result = Iob()
         if (bolus.amount != 0.0) {
             val now = System.currentTimeMillis() / (1000*60*60)
-            val circadian_sensitivity = (0.00000379*Math.pow(now.toDouble(),5.0))-(0.00016422*Math.pow(now.toDouble(),4.0))+(0.00128081*Math.pow(now.toDouble(),3.0))+(0.02533782*Math.pow(now.toDouble(),2.0))-(0.33275556*now)+1.38581503
+            //val circadian_sensitivity = (0.00000379*Math.pow(now.toDouble(),5.0))-(0.00016422*Math.pow(now.toDouble(),4.0))+(0.00128081*Math.pow(now.toDouble(),3.0))+(0.02533782*Math.pow(now.toDouble(),2.0))-(0.33275556*now)+1.38581503
+            var circadian_sensitivity = 1
+            when (now) {
+                in 0..1   -> {
+                    //circadian_sensitivity = 1.4;
+                    val circadian_sensitivity = (0.09130*Math.pow(now.toDouble(),3.0))-(0.33261*Math.pow(now.toDouble(),2.0))+1.4
+                }
+                in 2..2   -> {
+                    //circadian_sensitivity = 0.8;
+                    val circadian_sensitivity = (0.0869*Math.pow(now.toDouble(),3.0))-(0.05217*Math.pow(now.toDouble(),2.0))-(0.23478*now)+0.8
+                }
+                in 3..7   -> {
+                    //circadian_sensitivity = 0.8;
+                    val circadian_sensitivity = (0.0007*Math.pow(now.toDouble(),3.0))-(0.000730*Math.pow(now.toDouble(),2.0))-(0.0007826*now)+0.6
+                }
+                in 8..10  -> {
+                    //circadian_sensitivity = 0.6;
+                    val circadian_sensitivity = (0.001244*Math.pow(now.toDouble(),3.0))-(0.007619*Math.pow(now.toDouble(),2.0))-(0.007826*now)+0.4
+                }
+                in 11..14 -> {
+                    //circadian_sensitivity = 0.8;
+                    val circadian_sensitivity = (0.00078*Math.pow(now.toDouble(),3.0))-(0.00272*Math.pow(now.toDouble(),2.0))-(0.07619*now)+0.8
+                }
+                in 15..22 -> {
+                    val circadian_sensitivity = 1.0
+                }
+                in 22..24 -> {
+                    //circadian_sensitivity = 1.2;
+                    val circadian_sensitivity = (0.000125*Math.pow(now.toDouble(),3.0))-(0.0015*Math.pow(now.toDouble(),2.0))-(0.0045*now)+1
+                }
+            }
+
             val bolusTime = bolus.timestamp
             val t = (time - bolusTime) / 1000.0 / 60.0
             var td = dia * 60 //getDIA() always >= MIN_DIA
